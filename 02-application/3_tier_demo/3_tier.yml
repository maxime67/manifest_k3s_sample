# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: mon-app
---
# Secret pour la connexion MongoDB
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: mon-app
type: Opaque
data:
  # echo -n "mongodb://admin:motdepasse@mongodb-service:27017/madatabase" | base64
  connection-string: bW9uZ29kYjovL2FkbWluOm1vdGRlcGFzc2VAbW9uZ29kYi1zZXJ2aWNlOjI3MDE3L21hZGF0YWJhc2U/YXV0aFNvdXJjZT1hZG1pbg==
  # echo -n "admin" | base64
  username: YWRtaW4=
  # echo -n "motdepasse" | base64
  password: bW90ZGVwYXNzZQ==
---
# PersistentVolumeClaim pour MongoDB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: mon-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path # Classe de stockage par défaut de K3s
---
# Deployment MongoDB
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  namespace: mon-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:7.0
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: password
          volumeMounts:
            - name: mongodb-storage
              mountPath: /data/db
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
      volumes:
        - name: mongodb-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc
---
# Service MongoDB
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: mon-app
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
  type: ClusterIP
---
# Deployment Express.js API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express-api-deployment
  namespace: mon-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: express-api
  template:
    metadata:
      labels:
        app: express-api
    spec:
      containers:
        - name: express-api
          image: maxxa/k3s_demo_api:latest # Remplacez par votre image
          ports:
            - containerPort: 3000
          env:
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: connection-string
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3000"
          resources:
            limits:
              memory: "256Mi"
              cpu: "250m"
            requests:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /api
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Service Express.js API
apiVersion: v1
kind: Service
metadata:
  name: express-api-service
  namespace: mon-app
spec:
  selector:
    app: express-api
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP
---
# Deployment Vue.js Frontend avec build
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vue-frontend-deployment
  namespace: mon-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vue-frontend
  template:
    metadata:
      labels:
        app: vue-frontend
    spec:
      initContainers:
        - name: vue-builder
          image: maxxa/k3s_demo_vue:latest
          env:
            - name: VITE_API_URL
              value: "http://express-api-service:3000"
            - name: NODE_ENV
              value: "production"
          command:
            - sh
            - -c
            - |
              echo "Début du build Vue.js..."
              cd /app
              npm ci --only=production
              npm run build
              echo "Build terminé, copie des fichiers..."
              cp -r dist/* /shared-volume/
              echo "Fichiers copiés avec succès"
              ls -la /shared-volume/
          volumeMounts:
            - name: shared-volume
              mountPath: /shared-volume
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: shared-volume
              mountPath: /usr/share/nginx/html
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
            requests:
              memory: "64Mi"
              cpu: "50m"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: shared-volume
          emptyDir: {}
        - name: nginx-config
          configMap:
            name: nginx-config
---
# ConfigMap pour la configuration Nginx
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: mon-app
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
    
        # Configuration pour Vue.js SPA (Single Page Application)
        location / {
            try_files $uri $uri/ /index.html;
        }
    
        # Gestion des assets statiques
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    
        # Headers de sécurité
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    
        # Logs
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
---
# Service Vue.js Frontend
apiVersion: v1
kind: Service
metadata:
  name: vue-frontend-service
  namespace: mon-app
spec:
  selector:
    app: vue-frontend
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32000
---
# Service Express.js API avec NodePort
apiVersion: v1
kind: Service
metadata:
  name: express-api-service-nodeport
  namespace: mon-app
spec:
  selector:
    app: express-api
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 31000
---
# ConfigMap optionnel pour configuration additionnelle
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: mon-app
data:
  database-name: "madatabase"
  api-version: "v1"
  cors-origin: "*"