---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-migrations-job
  annotations:
    argocd.argoproj.io/sync-options: Delete=true
spec:
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-migrations-job
    spec:
      {{- if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 12 }}
      {{- end }}
      restartPolicy: OnFailure
      initContainers:
        # Attendre que MySQL soit prêt
        - name: wait-for-mysql
          image: busybox:1.35
                {{- if .Values.securityContext_pod }}
          securityContext:
                   {{- toYaml .Values.securityContext_pod | nindent 12 }}
                {{- end }}
          command:
            - sh
            - -c
            - |
              echo "Waiting for MySQL to be ready..."
              until nc -z {{ .Release.Name }}-mysql {{ .Values.mysql.port }}; do
                echo "MySQL is not ready yet, waiting 5 seconds..."
                sleep 5
              done
              echo "MySQL is ready!"

      containers:
        - name: symfony-migrations
          image: {{ .Values.symfony.image }}
                {{- if .Values.securityContext_pod }}
          securityContext:
                   {{- toYaml .Values.securityContext_pod | nindent 12 }}
                {{- end }}
          command:
            - sh
            - -c
            - |
              echo "Starting Symfony migrations..."
              echo "Database URL: $DATABASE_URL"
              # Créer les répertoires dans le volume temporaire
              mkdir -p /tmp/symfony/cache /tmp/symfony/log
              echo "mkdir /tmp/symfony/cache and /tmp/symfony/log"
              export SYMFONY_CACHE_DIR=/tmp/symfony/cache
              export SYMFONY_LOG_DIR=/tmp/symfony/log
              echo "Set Env var"


              php bin/console doctrine:database:create --if-not-exists
              echo "Create database"
              php bin/console doctrine:migrations:migrate --no-interaction
              echo "Migrations completed successfully!"
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: database-url
            - name: APP_ENV
              value: "prod"
            - name: APP_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: app-secret
          workingDir: /var/www/html
          volumeMounts:
            - name: temp-cache
              mountPath: /var/www/html/

      volumes:
        - name: temp-cache
          emptyDir: {}